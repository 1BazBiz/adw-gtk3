// Functions and mixins for Hdy (Taken from Yaru)
@function hdyalpha($c, $a) {
  @return unquote("alpha(#{$c}, #{$a})");
}

@function hdymix($c1, $c2, $r) {
  @return unquote("mix(#{$c1}, #{$c2}, #{$r})");
}

$leaflet_dimming: rgba(0, 0, 0, if($variant == 'light', 0.12, 0.24));
$leaflet_border: rgba(0, 0, 0, if($variant == 'light', 0.05, 0.2));
$leaflet_outline: rgba(255, 255, 255, if($variant == 'light', 0.2, 0.05));

@mixin background-shadow($direction) {
  background-image:
    linear-gradient($direction,
                    rgba(0, 0, 0, if($variant == 'light', 0.05, 0.1)),
                    rgba(0, 0, 0, if($variant == 'light', 0.01, 0.02)) 40px,
                    rgba(0, 0, 0, 0) 56px),
    linear-gradient($direction,
                    rgba(0, 0, 0, if($variant == 'light', 0.03, 0.06)),
                    rgba(0, 0, 0, if($variant == 'light', 0.01, 0.02)) 7px,
                    rgba(0, 0, 0, 0) 24px);
}

// Makes the corners of the given border rounded.
// $border must be top, bottom, left, or right.
@mixin rounded-border($border) {
  // The floors (top, bottom) and walls (left, right) of the corners matching
  // $border. This is needed to easily form floor-wall pairs regardless of
  // whether $border is a floor or a wall.
  $corners: (
    'top': (('top'), ('left', 'right')),
    'bottom': (('bottom'), ('left', 'right')),
    'left': (('top', 'bottom'), ('left')),
    'right': (('top', 'bottom'), ('right')),
  );

  @if not map-get($corners, $border) {
    @error "Unknown border type: #{$border}";
  }

  // Loop through the floors and walls of the corners of $border.
  @each $floor in nth(map-get($corners, $border), 1) {
    @each $wall in nth(map-get($corners, $border), 2) {
      border-#{$floor}-#{$wall}-radius: 8px;
      -gtk-outline-#{$floor}-#{$wall}-radius: 7px;
    }
  }
}

@mixin margin-start($margin) {
  &:dir(ltr) {
    margin-left: $margin;
  }

  &:dir(rtl) {
    margin-right: $margin;
  }
}

// Roundness on unified window decoration
// https://gitlab.gnome.org/GNOME/libhandy/-/issues/339
window.csd.unified:not(.solid-csd):not(.fullscreen) {
  &:not(.tiled):not(.tiled-top):not(.tiled-bottom):not(.tiled-left):not(.tiled-right):not(.maximized) {
    &,
    > decoration,
    > decoration-overlay {
      border-radius: $window_radius;
    }
  }
}

// Legacy application titlebuttons
.ssd .titlebar {
  border-width: 0;
  padding: 2px 4px;

  &.default-decoration button.titlebutton {
    background-color: $button_color;
    min-height: 24px;
    min-width: 24px;
    margin: 0 4px 0 4px;
    padding: 0;
    &:hover { background-color: $button_hover_color; }
    &:hover:active { background-color: $button_active_color; }
  }
}

// Lists (or "cards")
// Making lists more like libadwaita
list.content {
  background-color: $card_bg_color;
  color: $card_fg_color;
  padding-top: 6px;
  padding-bottom: 6px;
  @if $variant == 'light' { border: 1px solid $borders_color; }
  border-radius: $card_radius;
  box-shadow: 0 0 0 1px transparentize(black, 0.97),
              0 1px 3px 1px transparentize(black, .93),
              0 2px 6px 2px transparentize(black, .97);
}
// Reset it for things we don't want a custom list for
.sidebar list.content {
  box-shadow: none;
  border: none;
  border-radius: 0;
}

// HdyComboRow
popover.combo {
  padding: 0px;

  list {
    border-style: none;
    background-color: transparent;
    min-width: 200px;
    margin-top: 6px;
    margin-bottom: 6px;

    > row {
      padding: 0px 8px 0px 8px;
      min-height: 50px;

      &:not(:last-child) {
        border-bottom: 1px solid hdyalpha($borders_color, 0.5)
      }

      &:first-child {
        @include rounded-border(top);
      }

      &:last-child {
        @include rounded-border(bottom);
      }
    }
  }

  @each $border in top, bottom {
    overshoot.#{$border} {
      @include rounded-border($border);
    }
  }

  scrollbar.vertical {
    padding-top: 2px;
    padding-bottom: 2px;

    &:dir(ltr) {
      @include rounded-border(right);
    }

    &:dir(rtl) {
      @include rounded-border(left);
    }
  }
}

// HdyExpanderRow
row.expander {
  padding: 0px;

  image.expander-row-arrow {
    @include margin-start(6px);
  }
}

// HdyKeypad
keypad {
  .digit {
    font-size: 200%;
    font-weight: bold;
  }
  .letters {
    font-size: 70%;
  }
  .symbol {
    font-size: 160%;
  }
}

// I'm confused why the default styles for this doesn't work
// https://github.com/lassekongo83/adw-gtk3/issues/4#issuecomment-1018729772
button {
  &.destructive-action {
    background-color: $destructive_color;
    &:hover { // Color values here are just a guess
      background-color: darken($destructive_color, 6%);
    }
    &:checked, &:active {
      &, &:hover { background-color: darken($destructive_color, 11%); }
    }
  }
  &.suggested-action {
    background-color: $suggested_bg_color;
    &:hover {
      background-color: darken($suggested_bg_color, 6%);
    }
    &:checked, &:active {
      &, &:hover { background-color: darken($suggested_bg_color, 11%); }
    }
  }
}

// Nautilus
.nautilus-window {
  // Without this nautilus iconview grabs the bg_color
  notebook,
  notebook > stack:not(:only-child) searchbar { @extend %view; }

  // Path-bar
  .path-bar-box {
    border-radius: $button_radius;
    border: none;
    background-color: $button_color;
    padding-right: 6px;
  }

  .nautilus-path-bar button {
    margin: 0px;
  }

  .nautilus-path-bar button:first-child {
    border-width: 0px 1px 0px 0px;
    border-radius: $button_radius 0px 0px $button_radius;
  }

  .nautilus-path-bar button:not(:first-child) {
    border-width: 0px 1px 0px 1px;
    border-radius: 0px 0px 0px 0px;
  }

  .search + .toggle {
    background-color: $button_color;
    border-radius: 0 $button_radius $button_radius 0;
    &:hover { background-color: $button_hover_color; }
    &:active, &:checked { background-color: $button_checked_color; }
  }
}

// Floating status bar
.floating-bar {
  padding: 3px;
  background-color: $base_color;
  border-width: 1px;
  border-style: solid solid none;
  border-color: $borders_color;
  border-radius: 8px 0 0 0;
}
.floating-bar.bottom.left {
  border-left-style: none;
  border-top-left-radius: 0;
}
.floating-bar.bottom.right {
  border-right-style: none;
  border-top-right-radius: 0;
}
.floating-bar:backdrop {
  background-color: $base_color;
  border-color: $backdrop_borders_color;
}
.floating-bar button {
  padding: 0px;
}

// Disk space pie
$disk_space_unknown: #888a85;
$disk_space_used: #729fcf;
$disk_space_free: #eeeeec;

.disk-space-display {
  border-style: solid;
  border-width: 2px;
}
.disk-space-display.unknown {
  background-color: $disk_space_unknown;
  border-color: shade($disk_space_unknown, 0.7);
  color: $disk_space_unknown;
}
.disk-space-display.unknown.border {
  color: shade($disk_space_unknown, 0.7);
}

.disk-space-display.used {
  background-color: $disk_space_used;
  border-color: shade($disk_space_used, 0.7);
  color: $disk_space_used;
}
.disk-space-display.used.border {
  color: shade($disk_space_used, 0.7);
}
.disk-space-display.free {
  background-color: $disk_space_free;
  border-color: shade($disk_space_free, 0.7);
  color: $disk_space_free;
}
.disk-space-display.free.border {
  color: shade($disk_space_free, 0.7);
}

// Gedit
.gedit-search-slider {
  background-color: $base_color;
  border-radius: $button_radius;
}

// Gnome system monitor, clocks, weather
.background.csd.unified {
  // The stack buttons
  .titlebar .radio {
    margin: 0;
    border-radius: 0;
    border: none;
    max-height: $_headerbar_height;
    padding-top: 0px;
    padding-bottom: 0px;
    &:backdrop {
      background-color: $bg_color;
    }
    &:active, &:checked {
      background: $button_color;
      &:backdrop {
        background: $button_backdrop_color;
      }
    }
    .wide {
      padding-right: 20px;
    }
  }
}

// gnome-tweaks
list.tweak-categories separator.horizontal {
  background: transparent;
  margin: 2px 0;
}
